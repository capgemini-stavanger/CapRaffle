@model CapRaffle.Models.EventViewModel

@{
    ViewBag.Title = "Details";
}
    <script type="text/javascript">
        function updateSpotsLeft() {
            var numberOfSpots = '@Model.SelectedEvent.AvailableSpots';
            var total = 0;
            
            $("#WinnerTable tr:gt(0)").children("td.spots").each(function () {
                total += parseInt($(this).html());
            });
            total = numberOfSpots - total;
            toggleDrawWinnerAdministration(total);
            toggleWinnerTable(total)
            $("#spotsleft").text(total);
        }
        function toggleWinnerTable(total) {
            if(total == '@Model.SelectedEvent.AvailableSpots') {
                $("#WinnerTable").hide()
            }
            else { 
                $("#WinnerTable").show()
            }
        }
        function toggleDrawWinnerAdministration(total) {
            if(total <= 0) {
                $(".DrawWinnerAdministration").hide();
            }
            else {
                $(".DrawWinnerAdministration").show();
            }
        }

        $(document).ready(function () {
            
            $(".participants form").submit(function (e) {
                $.post($(this).attr("action"),
                    $(this).serialize(),
                    function (data) {
                        $(".ParticipantsTable").html(data);
                    });
                e.preventDefault();
            });

            $("form#adminAddParticipant").submit(function (e) {
                $.post($(this).attr("action"),
                    $(this).serialize(),
                    function (data) {
                        $(".ParticipantsTable").html(data);
                    });
                $("#adminUserEmailTextbox").val("");
                e.preventDefault();
            });

            $("#removeparticipation").click(function (e) {
                @if (Model.UserIsParticipant)
                {
                    <text>
                    var postdata = { UserEmail: '@Model.LoggedInParticipant.UserEmail', NumberOfSpots: '@Model.LoggedInParticipant.NumberOfSpots', EventId: '@Model.LoggedInParticipant.EventId' };
                    </text>
                }
                
                $.ajax({
                    url: '@Url.Action("Delete", "Participant")',
                    type: 'POST',
                    data: postdata,
                    success: function (data) {
                        location.reload();
                    }
                });
            });

        
            $("#adminUserEmailTextbox").autocomplete({
                source: function (request, response) {
                    $.ajax({    
                        type: 'POST',
                        url: '@Url.Action("GetUsers", "Participant")',
                        data: { email: request.term },
                        dataType: "json",
                        success: function(data) {
                            response(data)
                        },
                        error: function(data) {
                            alert(data)
                        }
                    });
                },
                minLength: 2
            });
            $('button#SetRules').click(function() {
                $.ajax({
                    url: '@Url.Action("Rules", "DrawWinner")',
                    data: 'eventId=@Model.SelectedEvent.EventId',
                    success: function(data) {
                        var dialog = $('<div style="display:none"></div>').appendTo('body');
                        dialog.html(data);
                        dialog.dialog({ 
                            width: 700, 
                            height: 500, 
                            modal: true, 
                            title: 'Choose rules for this event',
                            buttons: {
                                "Save rules": function() {
                                    var selectedRules = new Array();
                                    $("#rulesForEvent li").each(function () {
                                        var rule = {};
                                        rule.Param = $(this).children('.param').val();
                                        rule.RuleId = $(this).children('.ruleId').val();
                                        selectedRules.push(rule);

                                    });
                                    var postdata = { eventId: '@Model.SelectedEvent.EventId', rules: selectedRules };
                                    $.ajax({
                                        url: '@Url.Action("SaveRules", "DrawWinner")',
                                        type: 'POST',
                                        datatype: "JSON",
                                        traditional: true,
                                        context: $(this),
                                        contentType: 'application/json; charset=utf-8',
                                        data: JSON.stringify(postdata),
                                        success: function (data) {
                                            $(this).dialog("close");
                    
                                        }
                                    });
                                },
                                "Use category rules": function() {
                                    var postdata = { eventId: '@Model.SelectedEvent.EventId' };
                                    $.ajax({
                                        url: '@Url.Action("SaveRules", "DrawWinner")',
                                        type: 'POST',
                                        datatype: "JSON",
                                        traditional: true,
                                        context: $(this),
                                        contentType: 'application/json; charset=utf-8',
                                        data: JSON.stringify(postdata),
                                        success: function (data) {
                                            $(this).dialog("close");
                                        }
                                    });
                                }
                            }
                        });
                    }
                });
            });
            $('button#DrawWinner').click(function () {
                var view = $("#view option:selected").val();
                $("#WinnerTable tr:gt(0)").each(function () {
                    $(this).remove();
                });
                
                if($("#participants tr:gt(0)").length == 0) {
                    alert("nnooooo");
                    var dialog = $('<div style="display:none">It is not possible to draw a winner when there are no participants</div>').appendTo('body');
                    dialog.dialog({
                         title: 'Error drawing participants',
                         buttons: {
                            "OK": function() {
                                $(this).dialog("close");
                            }
                         }
                    })
                    return;
                }
                toggleWinnerTable(1);
                $.ajax({
                    type: 'post',
                    url: '@Url.Action("DrawWinner", "DrawWinner")',
                    data: 'eventId=@Model.SelectedEvent.EventId&view='+view,
                    success: function(data){ 
                        $('.drawWinner').html(data);
                    }
                })
            });
            updateSpotsLeft();
        });
    </script>
    <div class="right">
        <div class="participants">
        <h2>Raffle participants</h2>
            <div class="ParticipantsTable">
                @Html.Action("GetParticipants", "Participant", new { eventId = Model.SelectedEvent.EventId })
            </div>
            @if (@HttpContext.Current.User.Identity.IsAuthenticated)
            {
                using (Html.BeginForm("Create", "Participant", FormMethod.Post, new { id = "addParticipant" }))
                {
                    @Html.AntiForgeryToken()   
                    <input type="hidden" name="UserEmail" value="@HttpContext.Current.User.Identity.Name" />
                    <input type="hidden" name="EventId" value="@Model.SelectedEvent.EventId" />
            
                    <label for="NumberOfSpots">@(Model.UserIsParticipant ? "Update" : "Choose") number of spots</label>
                    @Html.DropDownList("NumberOfSpots", Model.NumberOfSpots)    
                <!--<input type="text" name="NumberOfSpots" />-->
                        <div class="buttons">
                            <button type="submit" class="positive" name="register">
                            <img src="@Url.Content("~/Content/images/apply2.png")" alt=""/>
                                @(Model.UserIsParticipant ? "Update" : "Register")
                            </button>
                        </div>
                }
                if (Model.UserIsParticipant)
                {
                    <div class="buttons">
                        <button class="nagative" type="submit" id="removeparticipation">
                            <img src="@Url.Content("~/Content/images/cross.png")" alt=""/>
                            Delete participation
                        </button>
                    </div>
                }
                <br />
            }
            else
            {
                <p>Sign in if you want to register for this event:</p>
            }
        </div>
        <br />
        <br />
        <div class="eventadministration">
            @if (@HttpContext.Current.User.Identity.Name.Equals(Model.SelectedEvent.Creator))
            {   
                <h2>Event administration</h2>
                using (Html.BeginForm("Delete", "Event"))
                {
                    @Html.AntiForgeryToken()
                    @Html.Hidden("id", Model.SelectedEvent.EventId)
        
                    <div class="buttons">
                        <button type="submit" class="nagative" name="DeleteEvent">
                            <img src="@Url.Content("~/Content/images/cross.png")" alt=""/>
                            Delete event
                        </button>
                    </div>
                }
                
                <div class="buttons">
                    <button type="submit" class="regular" name="edit" id="edit" onclick="javascript:window.location=('@Url.Action("Edit", "Event", new { id = @Model.SelectedEvent.EventId })')">
                        <img src="@Url.Content("~/Content/images/textfield_key.png")" alt=""/>
                        Edit event
                    </button>
                </div>
                <br />
                <br />
                <div class="buttons">
                    <button type="submit" class="positive" name="CrateBasedOnOld" onclick="javascript:window.location=('@Url.Action("CreateBasedOnOldEvent", "Event", new { id = @Model.SelectedEvent.EventId })')">
                        <img src="@Url.Content("~/Content/images/plus.gif")" alt=""/>
                        Create new event based on this
                    </button>
                </div>
                <div class="DrawWinnerAdministration">
                    <br /><br /><br />
                    <h4>Register User for this event</h4>
                    @using (Html.BeginForm("Create", "Participant", FormMethod.Post, new { id = "adminAddParticipant" }))
                    {
                        @Html.AntiForgeryToken()
                        <input id="adminUserEmailTextbox" type="text" name="UserEmail" />
                        <input type="hidden" name="EventId" value="@Model.SelectedEvent.EventId" />
                        @Html.DropDownList("NumberOfSpots", Model.NumberOfSpots) 
                        <div class="buttons">
                            <button type="submit" class="positive" name="register" id="adminAddParticipant">
                                <img src="@Url.Content("~/Content/images/plus.gif")" alt=""/>
                                Add
                            </button>
                        </div>
                    }
                    <br />
                    <br />
                
                    <h4> Draw winner for this event</h4>
                    <div class="buttons">
                        <button type="submit" id="SetRules" class="positive" name="Select rules">
                                <img src="@Url.Content("~/Content/images/apply2.png")" alt="" />
                                Select rules
                            </button> 
                            <br />
                            <br />
                            <br />
                            
                        @Html.DropDownList("view", Model.RaffleTypes)
                        <br />
                               
                        <button type="submit" id="DrawWinner" class="positive" name"Draw Winner">
                            <img src="@Url.Content("~/Content/images/apply2.png")" alt=""/>
                            Draw winners
                        </button>
                    </div>
                    <br />
                </div>
            }
        </div>
    </div>
    <div class="event">
        <h3 class="eventheader">@Model.SelectedEvent.Name</h3>
        <h6 style="">Created by: @Model.SelectedEvent.Creator on @Model.SelectedEvent.Created.ToString("dd MMM yyyy") under @Model.SelectedEvent.Category.Name</h6>
        <p>@Model.SelectedEvent.Description</p>
        <p>@(Model.SelectedEvent.InformationUrl == null ? "" : "More information about the event: " + @Model.SelectedEvent.InformationUrl)</p>
        <h4>Number of spots: @Model.SelectedEvent.AvailableSpots</h4>
        <h4>Number of spots left: <span id="spotsleft">@Model.SelectedEvent.AvailableSpots</span></h4>
        <h4>Deadline: @Model.SelectedEvent.DeadLine</h4>
    </div>
    <br />
    @{ Html.RenderPartial("_DisplayWinner", Model.SelectedEvent.Winners); }
    <div class="bottom">
        <div class="drawWinner">
          
        </div>
   </div>
   

